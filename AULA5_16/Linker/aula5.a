;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Advanced
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 27/06/2013
;Author  : www.Eca.ir *** www.Webkade.ir
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 14,745600 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;
;//leitura analogica:
;#define ADC_VREF_TYPE 0x40
;unsigned int read_adc(unsigned char adc_input)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0022 // Delay needed for the stabilization of the ADC input voltage
; 0000 0023 delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 0024 // Start the AD conversion
; 0000 0025 ADCSRA|=0x40;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0026 // Wait for the AD conversion to complete
; 0000 0027 while ((ADCSRA & 0x10)==0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0028 ADCSRA|=0x10;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0029 return ADCW;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002A }
;PCODE: $00000020 VOL: 0
;
;
;// I2C Bus functions
;#asm
;PCODE: $00000021 VOL: 0
   .equ __i2c_port=0x15 ;PORTC
;PCODE: $00000022 VOL: 0
   .equ __sda_bit=1
;PCODE: $00000023 VOL: 0
   .equ __scl_bit=0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0032 #endasm
;#include <i2c.h>
;
;// DS1307 Real Time Clock functions
;#include <ds1307.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 32
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;bit rx_message; // Flag de recepção de mensagem
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 006A {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 006B char status,data;
; 0000 006C status=UCSRA;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 006D data=UDR;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 006E if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 006F    {
; 0000 0070 
; 0000 0071    if ( data == '\r' )
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0072     {
; 0000 0073       data = 0;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0074       rx_message = 1;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0075     }
; 0000 0076 
; 0000 0077    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0078 #if RX_BUFFER_SIZE == 256
; 0000 0079    // special case for receiver buffer size=256
; 0000 007A    if (++rx_counter == 0)
; 0000 007B       {
; 0000 007C #else
; 0000 007D    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 007E    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 007F       {
; 0000 0080       rx_counter=0;
;PCODE: $00000048 VOL: 0
; 0000 0081 #endif
; 0000 0082       rx_buffer_overflow=1;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0083       }
; 0000 0084    }
;PCODE: $0000004C VOL: 0
; 0000 0085 }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 008C {
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 008D char data;
; 0000 008E while (rx_counter==0);
;PCODE: $00000054 VOL: 0
;	data -> R17
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 008F data=rx_buffer[rx_rd_index++];
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0090 #if RX_BUFFER_SIZE != 256
; 0000 0091 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0092 #endif
; 0000 0093 #asm("cli")
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
	cli
;PCODE: $00000065 VOL: 0
; 0000 0094 --rx_counter;
;PCODE: $00000066 VOL: 0
; 0000 0095 #asm("sei")
;PCODE: $00000067 VOL: 0
	sei
;PCODE: $00000068 VOL: 0
; 0000 0096 return data;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0097 }
;PCODE: $0000006C VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 32
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 00A7 {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00A8 if (tx_counter)
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00A9    {
; 0000 00AA    --tx_counter;
;PCODE: $00000071 VOL: 0
; 0000 00AB    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00AC #if TX_BUFFER_SIZE != 256
; 0000 00AD    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00AE #endif
; 0000 00AF    }
;PCODE: $0000007C VOL: 0
; 0000 00B0 }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00B7 {
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00B8 while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00B9 #asm("cli")
;PCODE: $00000089 VOL: 0
	cli
;PCODE: $0000008A VOL: 0
; 0000 00BA if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00BB    {
; 0000 00BC    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00BD #if TX_BUFFER_SIZE != 256
; 0000 00BE    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00BF #endif
; 0000 00C0    ++tx_counter;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00C1    }
; 0000 00C2 else
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00C3    UDR=c;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00C4 #asm("sei")
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
	sei
;PCODE: $000000A4 VOL: 0
; 0000 00C5 }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void main(void)
; 0000 00CF {
;PCODE: $000000A8 VOL: 0
; 0000 00D0 // Declare your local variables here
; 0000 00D1 unsigned char hour, min, sec, date, month, year;
; 0000 00D2   char message[32];
; 0000 00D3   int i,j;
; 0000 00D4   //char *strrec;
; 0000 00D5   unsigned int valor_ad;
; 0000 00D6   float Valor_tensao;
; 0000 00D7 
; 0000 00D8 // Input/Output Ports initialization
; 0000 00D9 // Port B initialization
; 0000 00DA // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=Out
; 0000 00DB // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=0
; 0000 00DC PORTB=0x00;
;PCODE: $000000A9 VOL: 0
;	hour -> R17
;	min -> R16
;	sec -> R19
;	date -> R18
;	month -> R21
;	year -> R20
;	message -> Y+10
;	i -> Y+8
;	j -> Y+6
;	valor_ad -> Y+4
;	Valor_tensao -> Y+0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00DD DDRB=0x01;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00DE 
; 0000 00DF // Port C initialization
; 0000 00E0 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00E1 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00E2 PORTC=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00E3 DDRC=0x00;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00E4 
; 0000 00E5 // Port D initialization
; 0000 00E6 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00E7 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00E8 PORTD=0x00;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00E9 DDRD=0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00EA 
; 0000 00EB // Timer/Counter 0 initialization
; 0000 00EC // Clock source: System Clock
; 0000 00ED // Clock value: Timer 0 Stopped
; 0000 00EE TCCR0=0x00;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00EF TCNT0=0x00;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00F0 
; 0000 00F1 // Timer/Counter 1 initialization
; 0000 00F2 // Clock source: System Clock
; 0000 00F3 // Clock value: Timer1 Stopped
; 0000 00F4 // Mode: Normal top=0xFFFF
; 0000 00F5 // OC1A output: Discon.
; 0000 00F6 // OC1B output: Discon.
; 0000 00F7 // Noise Canceler: Off
; 0000 00F8 // Input Capture on Falling Edge
; 0000 00F9 // Timer1 Overflow Interrupt: Off
; 0000 00FA // Input Capture Interrupt: Off
; 0000 00FB // Compare A Match Interrupt: Off
; 0000 00FC // Compare B Match Interrupt: Off
; 0000 00FD TCCR1A=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00FE TCCR1B=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00FF TCNT1H=0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0100 TCNT1L=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0101 ICR1H=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0102 ICR1L=0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0103 OCR1AH=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0104 OCR1AL=0x00;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0105 OCR1BH=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0106 OCR1BL=0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0107 
; 0000 0108 // Timer/Counter 2 initialization
; 0000 0109 // Clock source: System Clock
; 0000 010A // Clock value: Timer2 Stopped
; 0000 010B // Mode: Normal top=0xFF
; 0000 010C // OC2 output: Disconnected
; 0000 010D ASSR=0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 010E TCCR2=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 010F TCNT2=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0110 OCR2=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0111 
; 0000 0112 // External Interrupt(s) initialization
; 0000 0113 // INT0: Off
; 0000 0114 // INT1: Off
; 0000 0115 MCUCR=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0116 
; 0000 0117 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0118 TIMSK=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0119 
; 0000 011A // USART initialization
; 0000 011B // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 011C // USART Receiver: On
; 0000 011D // USART Transmitter: On
; 0000 011E // USART Mode: Asynchronous
; 0000 011F // USART Baud Rate: 19200
; 0000 0120 
; 0000 0121 
; 0000 0122 
; 0000 0123 
; 0000 0124 UCSRA=0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0125 UCSRB=0xD8;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0126 UCSRC=0x86;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0127 UBRRH=0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0128 UBRRL=0x5f;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0129 
; 0000 012A 
; 0000 012B // Analog Comparator initialization
; 0000 012C // Analog Comparator: Off
; 0000 012D // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 012E ACSR=0x80;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 012F SFIOR=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0130 
; 0000 0131 // ADC initialization
; 0000 0132 // ADC disabled
; 0000 0133 ADCSRA=0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0134 
; 0000 0135 // ADC initialization
; 0000 0136 // ADC Clock frequency: 921,600 kHz
; 0000 0137 // ADC Voltage Reference: Int., cap. on AREF
; 0000 0138 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0139 ADCSRA=0x84;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 013A 
; 0000 013B // SPI initialization
; 0000 013C // SPI disabled
; 0000 013D SPCR=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 013E 
; 0000 013F // TWI initialization
; 0000 0140 // TWI disabled
; 0000 0141 TWCR=0x00;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0142 
; 0000 0143 // I2C Bus initialization
; 0000 0144 i2c_init();
;PCODE: $000000F2 VOL: 0
; 0000 0145 
; 0000 0146 // DS1307 Real Time Clock initialization
; 0000 0147 // Square wave output on pin SQW/OUT: Off
; 0000 0148 // SQW/OUT pin state: 0
; 0000 0149 rtc_init(0,0,0);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 014A 
; 0000 014B printf("AT \r\n");
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 014C delay_ms(5000);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 014D printf("AT+SAPBR=3,1,\"Contype\",\"GPRS\"");
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 014E delay_ms(5000);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 014F //printf("AT+SAPBR=3,1,\"APN\",\"timbrasil.br\"");
; 0000 0150 printf("AT+SAPBR=3,1,\"APN\",\"zap.vivo.com.br\"");
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0151 delay_ms(5000);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0152 //printf("AT+SAPBR=3,1,\"USER\",\"tim\"");
; 0000 0153 printf("AT+SAPBR=3,1,\"USER\",\"vivo\"");
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0154 delay_ms(5000);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0155 //printf("AT+SAPBR=3,1,\"PWD\",\"tim\"");
; 0000 0156 printf("AT+SAPBR=3,1,\"PWD\",\"vivo\"");
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0157 
; 0000 0158 
; 0000 0159 }
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
